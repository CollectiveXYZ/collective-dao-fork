/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MolochSummonerInterface extends ethers.utils.Interface {
  functions: {
    "summonMoloch(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])": FunctionFragment;
    "template()": FunctionFragment;
    "daos(address)": FunctionFragment;
    "registerDao(address,string,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "summonMoloch",
    values: [
      string[],
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;
  encodeFunctionData(functionFragment: "daos", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerDao",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "summonMoloch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDao",
    data: BytesLike
  ): Result;

  events: {
    "SummonComplete(address,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[])": EventFragment;
    "Register(uint256,address,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SummonComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
}

export type SummonCompleteEvent = TypedEvent<
  [
    string,
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[]
  ] & {
    moloch: string;
    summoner: string[];
    tokens: string[];
    summoningTime: BigNumber;
    periodDuration: BigNumber;
    votingPeriodLength: BigNumber;
    gracePeriodLength: BigNumber;
    proposalDeposit: BigNumber;
    dilutionBound: BigNumber;
    processingReward: BigNumber;
    summonerShares: BigNumber[];
  }
>;

export type RegisterEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber] & {
    daoIdx: BigNumber;
    moloch: string;
    title: string;
    http: string;
    version: BigNumber;
  }
>;

export class MolochSummoner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MolochSummonerInterface;

  functions: {
    summonMoloch(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<[string]>;

    daos(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    registerDao(
      _daoAdress: string,
      _daoTitle: string,
      _http: string,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  summonMoloch(
    _summoner: string[],
    _approvedTokens: string[],
    _periodDuration: BigNumberish,
    _votingPeriodLength: BigNumberish,
    _gracePeriodLength: BigNumberish,
    _proposalDeposit: BigNumberish,
    _dilutionBound: BigNumberish,
    _processingReward: BigNumberish,
    _summonerShares: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  daos(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  registerDao(
    _daoAdress: string,
    _daoTitle: string,
    _http: string,
    _version: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    summonMoloch(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    template(overrides?: CallOverrides): Promise<string>;

    daos(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    registerDao(
      _daoAdress: string,
      _daoTitle: string,
      _http: string,
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SummonComplete(address,address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[])"(
      moloch?: string | null,
      summoner?: null,
      tokens?: null,
      summoningTime?: null,
      periodDuration?: null,
      votingPeriodLength?: null,
      gracePeriodLength?: null,
      proposalDeposit?: null,
      dilutionBound?: null,
      processingReward?: null,
      summonerShares?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ],
      {
        moloch: string;
        summoner: string[];
        tokens: string[];
        summoningTime: BigNumber;
        periodDuration: BigNumber;
        votingPeriodLength: BigNumber;
        gracePeriodLength: BigNumber;
        proposalDeposit: BigNumber;
        dilutionBound: BigNumber;
        processingReward: BigNumber;
        summonerShares: BigNumber[];
      }
    >;

    SummonComplete(
      moloch?: string | null,
      summoner?: null,
      tokens?: null,
      summoningTime?: null,
      periodDuration?: null,
      votingPeriodLength?: null,
      gracePeriodLength?: null,
      proposalDeposit?: null,
      dilutionBound?: null,
      processingReward?: null,
      summonerShares?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ],
      {
        moloch: string;
        summoner: string[];
        tokens: string[];
        summoningTime: BigNumber;
        periodDuration: BigNumber;
        votingPeriodLength: BigNumber;
        gracePeriodLength: BigNumber;
        proposalDeposit: BigNumber;
        dilutionBound: BigNumber;
        processingReward: BigNumber;
        summonerShares: BigNumber[];
      }
    >;

    "Register(uint256,address,string,string,uint256)"(
      daoIdx?: null,
      moloch?: null,
      title?: null,
      http?: null,
      version?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber],
      {
        daoIdx: BigNumber;
        moloch: string;
        title: string;
        http: string;
        version: BigNumber;
      }
    >;

    Register(
      daoIdx?: null,
      moloch?: null,
      title?: null,
      http?: null,
      version?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber],
      {
        daoIdx: BigNumber;
        moloch: string;
        title: string;
        http: string;
        version: BigNumber;
      }
    >;
  };

  estimateGas: {
    summonMoloch(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;

    daos(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerDao(
      _daoAdress: string,
      _daoTitle: string,
      _http: string,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    summonMoloch(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDao(
      _daoAdress: string,
      _daoTitle: string,
      _http: string,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
